
module mip(input logic clk,rstBut,clkBut,output logic memwrite,output logic [6:0]seg, output logic dp,
output logic [3:0] an ,output logic RegWriteD);
logic [31:0] writedata,pc,instr,readdata,wd3,instrF,PCF,instrD,AluOutE,WriteDataE,ALUOutE;
logic PcSrcD,MemWriteD, MemToRegD, ALUSrcD, BranchD, RegDstD,ForwardAD,ForwardBD,RegWriteM;
logic [2:0] alucontrol;
logic [1:0] ForwardAE, ForwardBE;
logic [4:0] WriteRegW,rtE;
reg clk_pulse,rst;

logic [3:0] in3,in2,in1,in0;
//output pc and dataadr
top_mips top_mips (clk_pulse, rst,
            instrF,
             pc, PCF,
             PcSrcD,
             MemWriteD, MemToRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             alucontrol,instrD, 
             ALUOutE, WriteDataE,
             ForwardAE, ForwardBE,
                 ForwardAD, ForwardBD,RegWriteM ,WriteRegW,rtE);
pulse_controller clkButton (clk, clkBut, 0,clk_pulse);
pulse_controller rstButton (clk, rstBut, 0,rst);

assign memwrite = MemWriteD;

assign in3 = PCF[7:4]; 
assign in2 = PCF[3:0];
assign in1 = ALUOutE[7:4];
assign in0 = ALUOutE[3:0];

display_controller display (clk,in3, in2, in1, in0,seg,dp,an);
endmodule

`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/25/2023 07:36:24 PM
// Design Name: 
// Module Name: PipelineSkeleton
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////

// Define pipes that exist in the PipelinedDatapath. 
// The pipes between Writeback (W) and Fetch (F), as well as Decode (D) and Execute (E) are given to you.
// Create the rest of the pipes where inputs follow the naming conventions in the book.


module PipeFtoD(input logic[31:0] instr, PcPlus4F,
                input logic EN, clear, clk, reset,      // ~StallD will be connected as this EN and PCSrcD as clear
                output logic[31:0] instrD, PcPlus4D);
                                
                always_ff @(posedge clk, posedge reset)begin
                    if(reset || clear)begin 
                        PcPlus4D <= 0;
                        instrD <= 0;
                    end
                    else begin
                        if(EN) begin
                            PcPlus4D <= PcPlus4F;
                            instrD <= instr;
                        end
                   end
                end

                /* to be filled */
                
endmodule

// The pipe between Writeback (W) and Fetch (F) is given as follows.

module PipeWtoF(input logic[31:0] PC,
                input logic EN, clk, reset,		// ~StallF will be connected as this EN
                output logic[31:0] PCF);

                always_ff @(posedge clk, posedge reset)
                    if(reset)
                        PCF <= 0;
                    else if(EN)
                        PCF <= PC;
endmodule

module PipeDtoE(input logic[31:0] RD1, RD2, SignImmD,
                input logic[4:0] RsD, RtD, RdD,
                input logic RegWriteD, MemtoRegD, MemWriteD, ALUSrcD, RegDstD,
                input logic[2:0] ALUControlD,
                input logic clear, clk, reset,
                output logic[31:0] RsData, RtData, SignImmE,
                output logic[4:0] RsE, RtE, RdE, 
                output logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                output logic[2:0] ALUControlE);

        always_ff @(posedge clk, posedge reset)
          if(reset || clear)
                begin
                // Control signals
                RegWriteE <= 0;
                MemtoRegE <= 0;
                MemWriteE <= 0;
                ALUControlE <= 0;
                ALUSrcE <= 0;
                RegDstE <= 0;
                
                // Data
                RsData <= 0;
                RtData <= 0;
                RsE <= 0;
                RtE <= 0;
                RdE <= 0;
                SignImmE <= 0;
                end
            else
                begin
                // Control signals
                RegWriteE <= RegWriteD;
                MemtoRegE <= MemtoRegD;
                MemWriteE <= MemWriteD;
                ALUControlE <= ALUControlD;
                ALUSrcE <= ALUSrcD;
                RegDstE <= RegDstD;
                
                // Data
                RsData <= RD1;
                RtData <= RD2;
                RsE <= RsD;
                RtE <= RtD;
                RdE <= RdD;
                SignImmE <= SignImmD;
                end

endmodule

module PipeEtoM(input logic [31:0] aluresult, [31:0] writeDataE,
                input logic  regWriteE, memToRegE, memWriteE,
                input logic[4:0] writeRegE,
                input logic clk, reset, clear, //EN,
                output logic [31:0] aluoutM, writeDataM,  
                output logic regWriteM, memToRegM, memToWriteM, 
                output logic [4:0] writeRegM);
               always_ff @(posedge clk, posedge reset) begin
                    if(clear || reset)begin
                        aluoutM <= 0;
                        writeDataM <= 0;
                        regWriteM <= 0;
                        memToRegM <= 0;
                        memToWriteM <= 0;
                        writeRegM <= 0;
                    end
                    else begin
                        writeDataM <= writeDataE;
                        regWriteM <= regWriteE;
                        memToRegM <= memToRegE;
                        memToWriteM <= memWriteE;
                        writeRegM <= writeRegE;
                        aluoutM <= aluresult;
                    end
               end

                  // to be filled
endmodule

module PipeMtoW(input logic [31:0] memresult, aluoutM,
                input logic  regWriteM, memToRegM, 
                input logic [4:0] writeRegM,
                input logic clk, reset, clear, 
                output logic RegWriteW, MemtoRegW,
                output logic [4:0] writeRegW,
                output logic [31:0] readDataW, aluoutW);
                  // to be filled 
                 always_ff @(posedge clk, posedge reset) begin
                    if(reset || clear) begin
                        writeRegW <= 0;
                        readDataW <= 0;
                        aluoutW <= 0;
                        RegWriteW <= 0;
                        MemtoRegW <= 0;
                    end
                    else begin
                         if(reset || clear) begin
                             writeRegW <= writeRegM;
                             readDataW <= memresult;
                             aluoutW <= aluoutM;
                             RegWriteW <= regWriteM;
                             MemtoRegW <= memToRegM;
                         end
                    end
                 end
endmodule



// *******************************************************************************
// End of the individual pipe definitions.
// ******************************************************************************

// *******************************************************************************
// Below is the definition of the datapath.
// The signature of the module is given. The datapath will include (not limited to) the following items:
//  (1) Adder that adds 4 to PC
//  (2) Shifter that shifts SignImmD to left by 2
//  (3) Sign extender and Register file
//  (4) PipeFtoD
//  (5) PipeDtoE and ALU
//  (5) Adder for PcBranchD
//  (6) PipeEtoM and Data Memory
//  (7) PipeMtoW
//  (8) Many muxes
//  (9) Hazard unit
//  ...?
// *******************************************************************************

module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                 output logic [31:0] instrF,		
                 output logic [31:0] instrD, PC, PCF,
                output logic PcSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD,
                  stallF, stallD, flushE,output logic [31:0] RtData,
                  input logic jaddchooserD); //stallF and D eklendi// Add or remove input-outputs if necessary

	// ****
	// Here, define the wires that are needed inside this pipelined datapath module
	// ****
  
  	//* We have defined a few wires for you
    logic [31:0] PcSrcA, PcSrcB, PcBranchD, PcPlus4F,   PcPlus4D;	
  	logic [31:0] SignImmD, ShiftedImmD;
  	logic [31:0] ResultW;
  	logic [4:0] WriteRegW;
  	logic [31:0] RD1, RD2;
  	logic [31:0] SrcBE;
  	logic [31:0] ReadDataM;
  
  //DtoE icin eklendi
    logic[4:0] RsD, RtD, RdD;
    logic[31:0] RsData, /*RtData,*/ SignImmE, srcAE;
    logic[4:0] RsE, RtE, RdE;
    logic RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE;
    logic[2:0] ALUControlE;
    //EtoM icin eklendi
    logic [31:0] aluoutM, writeDataM;
    logic regWriteM, memToRegM, memToWriteM;
    logic [4:0] writeRegE,writeRegM;
    //MtoW icin eklendi
    logic RegWriteW, MemtoRegW;
    logic [4:0] writeRegW;
    logic [31:0] readDataW, aluoutW;
	//* You should define others down below (you might want to rename some of the wires above while implementing the pipeline)
  
  	//* We have provided you with a single-cycle datapath
  	//* You should convert it to a pipelined datapath, changing the connections between modules as necessary
    
  	//   // Replace with PipeWtoF
    //flopr #(32) pcreg(clk, reset, PC, PCF);
    PipeWtoF wtof(PC, ~stallF, clk, reset, PCF);
  
  	// Do some operations
    assign PcPlus4F = PCF + 4;
    assign PcSrcB = PcBranchD;
	assign PcSrcA = PcPlus4F;
	logic [31:0] pctemp;
  	mux2 #(32) pc_mux(PcSrcA, PcSrcB, PcSrcD, pctemp);
  	mux2 #(32) pc_muxForJR(RtData, pctemp, jaddchooserD, PC);
    
    imem im1(PCF[5:0], instrF); //aly
    
  //	// Replace the code below with PipeFtoD
  //	assign instrD = instrF;
    PipeFtoD ftod(instrF, PcPlus4F, ~stallD, PcSrcD,clk, reset, instrD, PcPlus4D);
  
  	// Decode stage
  	regfile rf(~clk, reset, RegWriteD, instrD[25:21], instrD[20:16], WriteRegW, ResultW, RD1, RD2);
  	signext se(instrD[15:0], SignImmD);
  	
  	sl2 shiftimm(SignImmD, ShiftedImmD);
  	adder branchadd(PcPlus4F, ShiftedImmD, PcBranchD);   //4f 4d yapildi
  
  	// Instantiate PipeDtoE here
  	assign RsD = instrD[25:21];
    assign RtD = instrD[20:16];
    assign RdD = instrD[15:11];
    PipeDtoE dtoe(RD1, RD2, SignImmD,
                      RsD, RtD, RdD,
                      RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD,
                      ALUControlD,
                      flushE, clk, reset,    
                      RsData, RtData, SignImmE,
                      RsE, RtE, RdE, 
                      RegWriteE, MemtoRegE, MemWriteE, ALUSrcE, RegDstE,
                      ALUControlE);
  	 //Execute stage
  	logic[31:0] equalId2,equalId3; 
  	logic equalId;
  	mux2 #(32) rd1m(RD1, aluoutM, ForwardAD, equalId2);
  	mux2 #(32) rd2m(RD2, aluoutM, ForwardBD, equalId3);
    assign equalId = (equalId2 == equalId3); 
    assign PcSrcD = (BranchD & equalId);
    
    
  	//mux2 #(32) srcBMux(RD2, SignImmD, ALUSrcD, SrcBE);
  	alu alu(srcAE, SrcBE, ALUControlD, ALUOutE);
  	//mux2 #(5) wrMux(instrD[20:16], instrD[15:11], RegDstD, WriteRegW);
    mux4 #(32) srcAEm(RsData, ResultW, aluoutM, 0, ForwardAE, srcAE);  
    mux4 #(32) srcBEm(RtData, ResultW, aluoutM, 0, ForwardBE, WriteDataE);  
    mux2 #(32) srcBEmux(WriteDataE, SignImmE, ALUSrcE, SrcBE);
  	//   // Replace the code below with PipeEtoM
  	//assign WriteDataE = RD2;
  	mux2 #(5) wrrege(RtE, RdE, RegDstE,writeRegE);
   PipeEtoM eto(ALUOutE, WriteDataE,
                      RegWriteE, MemtoRegE, MemWriteE,
                      writeRegE,
                      clk, reset, 1'b0, //EN,  //clear ne olacak??
                      aluoutM, writeDataM,  
                      regWriteM, memToRegM, memToWriteM, 
                      writeRegM);
  	// Memory stage
  	dmem DM(clk, memToWriteM, aluoutM, writeDataM, ReadDataM);

  	// Instantiate PipeMtoW
    PipeMtoW mtow( ReadDataM, aluoutM,
              regWriteM, memToRegM, 
              writeRegM,
              clk, reset, 1'b0,                 //clear ne olacak??
             RegWriteW, MemtoRegW,
             writeRegW,
             readDataW, aluoutW);
  	// Writeback stage
  	mux2 #(32) wbmux(aluoutW, readDataW, MemtoRegW, ResultW);
  	
  	// Replace the code below with HazardUnit
  	HazardUnit h(RegWriteW, BranchD, WriteRegW, writeRegE, regWriteM, memToRegM, writeRegM, RegWriteE, MemtoRegE, RsE, RtE, RsD, RtD, clk, ForwardAE,
  	ForwardBE,flushE, stallD,stallF,ForwardAD, ForwardBD);
endmodule

module HazardUnit( input logic RegWriteW, BranchD,
                input logic [4:0] WriteRegW, WriteRegE,
                input logic RegWriteM,MemtoRegM,
                input logic [4:0] WriteRegM,
                input logic RegWriteE,MemtoRegE,
                input logic [4:0] rsE,rtE,
                input logic [4:0] rsD,rtD,
                input logic clk,
                output logic [1:0] ForwardAE,ForwardBE,
                output logic FlushE,StallD,StallF,ForwardAD, ForwardBD
                 ); // Add or remove input-outputs if necessary
       
	// ********************************************************************
	// Here, write equations for the Hazard Logic.
	// If you have troubles, please study pages ~420-430 in your book.
	// ********************************************************************
	logic lwstall, branchstall;
	always @(clk) begin
	   ForwardAD <= (rsD != 0) & (rsD == WriteRegM) & RegWriteM; 
	   ForwardBD <= (rtD != 0) & (rtD == WriteRegM) & RegWriteM; 
	   lwstall <= ((rsD==rtE) | (rtD==rtE)) & MemtoRegE;
	   branchstall <= BranchD & RegWriteE & (WriteRegE == rsD | WriteRegE == rtD) | BranchD & MemtoRegM & (WriteRegM == rsD | WriteRegM == rtD);
	   FlushE <=   lwstall | branchstall;
	   StallD <=   lwstall | branchstall;
	   StallF <=   lwstall | branchstall;
	   if ((rsE != 0) & (rsE == WriteRegM) & RegWriteM)begin
	       ForwardAE <= 10;
	   end
	   else begin
	       if ((rsE != 0) & (rsE == WriteRegW) & RegWriteW) begin
	           ForwardAE <= 01;
	       end
	       else begin 
	           ForwardAE <= 00;
	       end
       end
	   if ((rtE != 0) & (rtE == WriteRegM) & RegWriteM)begin
           ForwardBE <= 10;
       end
       else begin
           if ((rtE != 0) & (rtE == WriteRegW) & RegWriteW) begin
               ForwardBE <= 01;
           end
           else begin 
               ForwardBE <= 00;
           end
       end	
    end
  
endmodule


// You can add some more logic variables for testing purposes
// but you cannot remove existing variables as we need you to output 
// these values on the waveform for grading
module top_mips (input  logic        clk, reset,
             output  logic[31:0]  instrF,
             output logic[31:0] PC, PCF,
             output logic PcSrcD,
             output logic MemWriteD, MemToRegD, ALUSrcD, BranchD, RegDstD, RegWriteD,
             output logic [2:0]  alucontrol,
             output logic [31:0] instrD, 
             output logic [31:0] ALUOutE, WriteDataE,
             output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD, stallF, stallD,  flushE,jaddchooserD,
                 output logic [31:0] rsData);
/*WriteRegE
module datapath (input  logic clk, reset,
                input  logic[2:0]  ALUControlD,
                input logic RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, BranchD,
                 output logic [31:0] instrF,		
                 output logic [31:0] instrD, PC, PCF,
                output logic PcSrcD,                 
                output logic [31:0] ALUOutE, WriteDataE,
                output logic [1:0] ForwardAE, ForwardBE,
                 output logic ForwardAD, ForwardBD,
                  stallF, stallD, flushE);
*/

    controller CU(instrD[31:26], instrD[5:0], MemToRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD, alucontrol, BranchD,jaddchooserD);
    
    datapath DP(clk, reset, alucontrol, RegWriteD, MemToRegD, MemWriteD, ALUSrcD, RegDstD, BranchD, 
        instrF, instrD, 
        PC, PCF, PcSrcD,
        ALUOutE, WriteDataE, 
        ForwardAE, ForwardBE, ForwardAD, ForwardBD, stallF, stallD, flushE,rsData,jaddchooserD); // Add or remove input-outputs as necessary
  
  
  
endmodule


// External instruction memory used by MIPS
// processor. It models instruction memory as a stored-program 
// ROM, with address as input, and instruction as output
// Modify it to test your own programs.

module imem ( input logic [5:0] addr, output logic [31:0] instr);

// imem is modeled as a lookup table, a stored-program byte-addressable ROM
	always_comb
	   case ({addr,2'b00})		   	// word-aligned fetch
//
// 	***************************************************************************
//	Here, you can paste your own test cases that you prepared for the part 1-e.
//  An example test program is given below.        
//	***************************************************************************
//
//		address		instruction
//		-------		-----------

    8'h00: instr = 32'h20080005;
    8'h04: instr = 32'hac080060;
    8'h08: instr = 32'h8c090060;
    8'h0c: instr = 32'h212a0004;
    8'h10: instr = 32'h212b0003;
    8'h14: instr = 32'h8d6b0058;
    8'h18: instr = 32'h014b5022;
    8'h1c: instr = 32'hac0a0070;
    8'h20: instr = 32'h8c080070;
    8'h24: instr = 32'h8d09006c;
    8'h28: instr = 32'h01094820;

//8'h00: instr = 32'h21690001;
//8'h04: instr = 32'h3C090001;
//8'h08: instr = 32'h21F80002;
//8'h0c: instr = 32'h21AE0003;

       default:  instr = {32{1'bx}};	// unknown address
	   endcase
endmodule


// 	***************************************************************************
//	Below are the modules that you should modify to add more instructions to the CPU
//	***************************************************************************

module controller(input  logic[5:0] op, funct,
                  output logic     memtoreg, memwrite,
                  output logic     alusrc,
                  output logic     regdst, regwrite,
                  output logic[2:0] alucontrol,
                  output logic branch,jaddchooserD);

   logic [1:0] aluop;
//    controller CU(instrD[31:26], instrD[5:0], MemToRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD, alucontrol, BranchD);

  maindec md (op,funct, memtoreg, memwrite, branch,jaddchooserD, alusrc, regdst, regwrite, aluop);

   aludec ad (funct, aluop, alucontrol);

endmodule

// External data memory used by MIPS single-cycle processor

module dmem (input  logic        clk, we,
             input  logic[31:0]  a, wd,
             output logic[31:0]  rd);

   logic  [31:0] RAM[63:0];
  
   assign rd = RAM[a[31:2]];    // word-aligned  read (for lw)

   always_ff @(posedge clk)
     if (we)
       RAM[a[31:2]] <= wd;      // word-aligned write (for sw)

endmodule

module maindec (input logic[5:0] op, funct,
	              output logic memtoreg, memwrite, branch, jaddchooserD,
	              output logic alusrc, regdst, regwrite,
	              output logic[1:0] aluop );
  logic [9:0] controls;

   assign {regwrite, regdst, alusrc, branch, memwrite,
                memtoreg,  aluop, jaddchooserD} = controls;
/*
//    controller CU(instrD[31:26], instrD[5:0], MemToRegD, MemWriteD, ALUSrcD, RegDstD, RegWriteD, alucontrol, BranchD);

  maindec md (op, memtoreg, memwrite, branch, alusrc, regdst, regwrite, aluop);
*/
  always_comb
    case(op)
     6'b000000: begin
                         if(funct == 6'b001000)
                         begin
                         controls <= 10'b0100001010;
                         end
                         else
                         begin 
                         controls <= 10'b1100001001; // R-type
                         end
                     end
          6'b100011: controls <= 10'b1010010001; // LW
          6'b101011: controls <= 10'b0010100001; // SW
          6'b000100: controls <= 10'b0001000101; // BEQ
          6'b001000: controls <= 10'b1010000001; // ADDI
          6'b000010: controls <= 10'b0000000011; // J
          6'b001111: controls <= 10'b1010001101; //FOR LUI
          default:   controls <= 10'bxxxxxxxxxx; // illegal op
    endcase
endmodule

module aludec (input    logic[5:0] funct,
               input    logic[1:0] aluop,
               output   logic[2:0] alucontrol);
  always_comb
    case(aluop)
      2'b00: alucontrol  = 3'b010;  // add  (for lw/sw/addi)
      2'b01: alucontrol  = 3'b110;  // sub   (for beq)
      2'b11: alucontrol  = 3'b100;
      default: case(funct)          // R-TYPE instructions
          6'b100000: alucontrol  = 3'b010; // ADD
          6'b100010: alucontrol  = 3'b110; // SUB
          6'b100100: alucontrol  = 3'b000; // AND
          6'b100101: alucontrol  = 3'b001; // OR
          6'b101010: alucontrol  = 3'b111; // SLT
          default:   alucontrol  = 3'bxxx; // ???
        endcase
    endcase
endmodule

module regfile (input    logic clk, reset, we3, 
                input    logic[4:0]  ra1, ra2, wa3, 
                input    logic[31:0] wd3, 
                output   logic[31:0] rd1, rd2);

  logic [31:0] rf [31:0];

  // three ported register file: read two ports combinationally
  // write third port on falling edge of clock. Register0 hardwired to 0.

  always_ff @(negedge clk)
     if (reset)
        for (int i=0; i<32; i++) rf[i] = 32'b0;
     else if (we3)
        rf[wa3] <= wd3;

  assign rd1 = (ra1 != 0) ? rf[ra1] : 0;
  assign rd2 = (ra2 != 0) ? rf[ra2] : 0;

endmodule

module alu(input  logic [31:0] a, b, 
           input  logic [2:0]  alucont, 
           output logic [31:0] result,
           output logic zero);
    
    always_comb
        case(alucont)
            3'b010: result = a + b;
            3'b110: result = a - b;
            3'b000: result = a & b;
            3'b001: result = a | b;
            3'b111: result = (a < b) ? 1 : 0;
            3'b100: result = b<<16;
            default: result = {32{1'bx}};
        endcase
    
    assign zero = (result == 0) ? 1'b1 : 1'b0;
    
endmodule

module adder (input  logic[31:0] a, b,
              output logic[31:0] y);
     
     assign y = a + b;
endmodule

module sl2 (input  logic[31:0] a,
            output logic[31:0] y);
     
     assign y = {a[29:0], 2'b00}; // shifts left by 2
endmodule

module signext (input  logic[15:0] a,
                output logic[31:0] y);
              
  assign y = {{16{a[15]}}, a};    // sign-extends 16-bit a
endmodule

// parameterized register
module flopr #(parameter WIDTH = 8)
              (input logic clk, reset, 
	       input logic[WIDTH-1:0] d, 
               output logic[WIDTH-1:0] q);

  always_ff@(posedge clk, posedge reset)
    if (reset) q <= 0; 
    else       q <= d;
endmodule


// paramaterized 2-to-1 MUX
module mux2 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1,  
              input  logic s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s ? d1 : d0; 
endmodule

// paramaterized 4-to-1 MUX
module mux4 #(parameter WIDTH = 8)
             (input  logic[WIDTH-1:0] d0, d1, d2, d3,
              input  logic[1:0] s, 
              output logic[WIDTH-1:0] y);
  
   assign y = s[1] ? ( s[0] ? d3 : d2 ) : (s[0] ? d1 : d0); 
endmodule
